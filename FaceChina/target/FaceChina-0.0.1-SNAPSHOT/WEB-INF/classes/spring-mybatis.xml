<?xml version="1.0" encoding="UTF-8"?>
<beans default-lazy-init="true"
	xmlns="http://www.springframework.org/schema/beans" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="  
       http://www.springframework.org/schema/beans   
       http://www.springframework.org/schema/beans/spring-beans-4.3.xsd  
       http://www.springframework.org/schema/mvc   
       http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd   
       http://www.springframework.org/schema/tx   
       http://www.springframework.org/schema/tx/spring-tx-4.3.xsd   
       http://www.springframework.org/schema/aop 
       http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
       http://www.springframework.org/schema/util 
       http://www.springframework.org/schema/util/spring-util-4.3.xsd
       http://www.springframework.org/schema/data/jpa 
       http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.3.xsd
       http://mybatis.org/schema/mybatis-spring
       http://mybatis.org/schema/mybatis-spring.xsd">
	<!-- 整合mybatis框架 -->
	<!-- dao对象 实现接口的代理对象 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	<!-- 为什么自动就getobject()？？  Spring定义的FactoryBean接口
		 spring扫描类，发现Bean对象实现了FactoryBean接口，就自动getobject()，再创建一个bean对象
		 可以看源码！！！！！-->
	<!-- 
		SqlSessionFactoryBean sqlfactoryBean = new SqlSessionFactoryBean(); 
		 //mybatis需要符合spring的规范：实现FactoryBean接口getobject方法，
		 //运行时会创建两个对象SqlSessionFactoryBean、SqlSessionFactory
		 SqlSessionFactory sessionFactory = sqlfactoryBean.getObject(); 
		 SqlSessionFactory源码： 
		 factoryBean.getObject(){ 
		 ... 
		 	 return this.sqlSessionFactoryBuilder.build(configuration); 
		 }
		 session工厂可以使用 SqlSessionFactoryBuilder来创建 在 MyBatis-Spring 中,使用 SqlSessionFactoryBean
		 来替代 -->
		<property name="DataSource" ref="dataSource" />
		<!-- mapper文件 -->
		<property name="mapperLocations" value="classpath*:mapper/*Mapper.xml" />
	</bean>

	<!-- 为方便我们对dao对象进行扫描，可以由系统底层对dao接口创建一个对象，然年基于底层对象访问数据库，需要添加如下配置 -->
	<!-- 齐老师加的,直接扫描-->
	<!--  <mybatis:scan base-package="com.fc.**.dao" />-->

	<!-- 通过此bean对象扫描指定包下的dao接口，并创建其实现接口的代理对象 -->
	<bean id="daoScanner" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="BasePackage" value="com.fc.**.dao" />
		<!-- 当spring容器只有一个sqlSessionFactory时如下配置可以不写 -->
		<property name="SqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<!-- ref写的是id,Beanname对应字符串String -->
	</bean>
	<!-- 添加如上配置以后系统需要dao对象时，可以直接从spring容器获取 -->
</beans>









